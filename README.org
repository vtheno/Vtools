*** Simple SML like datatype in python
    - usage
      
      #+BEGIN_SRC python
        import dt
        mdt = dt.Datatype()
        mcs = dt.Constructor()
        mdt.Nat('int') == mcs.Zero() \
                        |  mcs.Succ('nat')
        Nat = mdt.Nat
        Zero = mcs.Zero
        Succ = mcs.Succ
        zero = Zero()
        print( zero ) # => Zero
        print( Succ(zero) ) # => Succ [Zero, '...']
      #+END_SRC
*** Simple Match in python
    - useage 
      
      #+BEGIN_SRC python
        import dt
        mdt = dt.Datatype()
        mcs = dt.Constructor()
        mdt.Nat('int') == mcs.Zero() \
                        |  mcs.Succ('nat')
        Nat = mdt.Nat
        Zero = mcs.Zero
        Succ = mcs.Succ
        zero = Zero()
        print( zero ) # => Zero
        print( Succ(zero) ) # => Succ [Zero, '...']
        from Match import *
        @matcher(Zero,False) # Zero is class ,False is not tail recursion
        def toInt(self):
            return 0
        @matcher(Succ,False)
        def toInt(self):
            # self.nat is before mcs.Succ('nat') ,that 'nat' 
            return 1 + self.nat.toInt()
        one = Succ(zero)
        two = Succ(one)
        print( toInt(zero) ,toInt(two) ) # => 0 ,2
      #+END_SRC
*** Simple tail recursion
    - useage
      
      #+BEGIN_SRC python
        # todo,you can see List.py 
      #+END_SRC
